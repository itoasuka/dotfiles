#-------------------------------------------------------------------------------------------------
# □ 基本 {{{
#-------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'

# 最後に開いたバッファを記録
[[plugins]]
repo = 'Shougo/neomru.vim'

# すごいやつ
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " 最近使用したファイル一覧 File-Recent
  nnoremap <silent> <Space>fr :<C-u>Denite file_mru<CR>
  " カレントディレクトリ以下のファイル File-Go
  nnoremap <silent> <Space>fg :<C-u>Denite file_rec<CR>
  " 常用セット
  nnoremap <silent> <Space>uu :<C-u>Denite buffer file_mru<CR>
'''

# EditorConfig
[[plugins]]
repo = "editorconfig/editorconfig-vim"

# カーソル位置のコンテキストの fr を判定するライブラリ
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# カーソル位置のコンテキストに合わせて ft を切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# かっこいいカラースキーム
[[plugins]]
repo = 'w0ng/vim-hybrid'

# かっこいいステータスライン
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  " フォント依存のセパレータを使うと何かとめんどくさいので使わないことにする
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'component' : {
    \   'readonly': '%{&readonly?"🔒":""}',
    \ },
    \ 'subseparator': { 'left': "|", 'right': "|" }
    \ }
'''

# いろいろサクサク移動
[[plugins]]
repo = 'tpope/vim-unimpaired'

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  " deoplete を使う
  let g:deoplete#enable_at_startup = 1
  " smartcase を使う
  let g:deoplete#enable_smart_case = 1
  " 補完が有効になる文字数
  let g:deoplete#auto_completion_start_length = 3

  let g:deoplete#sources = {}
  let g:deoplete#sources._=['buffer', 'file', 'dictionary']

  let g:deoplete#omni#input_patterns = {}

  let g:deoplete#omni#functions = {}

  " <TAB> : 補完
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
'''

# NeoVim のプラグインを Vim8 で使うのに必要なやつ
[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''
depends = ['deoplete.nvim']

# NeoVim のプラグインを Vim8 で使うのに必要なやつ
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''
depends = ['deoplete.nvim']

# }}}
#-------------------------------------------------------------------------------------------------
# □ コーディング関連 {{{
#-------------------------------------------------------------------------------------------------
# インデントを見やすく
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

# 構文チェック
[[plugins]]
repo = 'w0rp/ale'

# Language Server 対応
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
depends = 'deoplete.nvim'
hook_add = '''
  let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ }
'''

# C#
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
if = '''has('python')'''
depends = ['deoplete.nvim']
hook_add = '''
  let g:deoplete#sources.cs = ['omni', 'file', 'buffer']
  let g:deoplete#omni#input_patterns.cs = ['\w*']

  augroup omnisharp_commands
    autocmd!

    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
  augroup END
'''

# Elm
[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = 'elm'
depends = ['deoplete.nvim']
hook_add = '''
  augroup elm_commands
    autocmd!

    autocmd FileType elm nnoremap <buffer> <Space>sr :<C-u>ElmFormat<CR>
  augroup END

  let g:deoplete#omni#functions.elm = ['elm#Complete']
  let g:deoplete#omni#input_patterns.elm = '[^ \t]+'
  let g:deoplete#sources.elm = ['omni'] + g:deoplete#sources._
'''

# JavaScript
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'
# }}}
#-------------------------------------------------------------------------------------------------
# vim:set foldmethod=marker:
