#-------------------------------------------------------------------------------------------------
# □ 基本 {{{
#-------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'

# 最後に開いたバッファを記録
[[plugins]]
repo = 'Shougo/neomru.vim'

# すごいやつ
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " 最近使用したファイル一覧 File-Recent
  nnoremap <silent> <Space>fr :<C-u>Denite file_mru<CR>
  " カレントディレクトリ以下のファイル File-Go
  nnoremap <silent> <Space>fg :<C-u>Denite file_rec<CR>
  " 常用セット
  nnoremap <silent> <Space>uu :<C-u>Denite buffer file_mru<CR>
'''

# EditorConfig
[[plugins]]
repo = "editorconfig/editorconfig-vim"

# カーソル位置のコンテキストの fr を判定するライブラリ
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# カーソル位置のコンテキストに合わせて ft を切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# かっこいいカラースキーム
[[plugins]]
repo = 'w0ng/vim-hybrid'

# アイコンフォントの有効活用
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  " フォルダアイコンの表示をON
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

# 非同期で Git 情報を取得するやつ
[[plugins]]
repo = 'lambdalisue/gina.vim'

# ツリー表示
[[plugins]]
repo = 'scrooloose/nerdtree'
depends =[ 'vim-devicons' ]
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  let g:NERDTreeDirArrowExpandable = '▸'
  let g:NERDTreeDirArrowCollapsible = '▾'
'''

# かっこいいステータスライン
[[plugins]]
repo = 'itchyny/lightline.vim'
depends =[ 'gina', 'vim-devicons' ]
hook_add = '''
  " Cica っていうフォント入れてね（https://github.com/miiton/Cica）
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left' : [ [ 'mode', 'paste' ],
    \              [ 'gina', 'filename' ] ]
    \ },
    \ 'component_function' : {
    \   'gina': 'LightLineGina',
    \   'readonly': 'LightLineReadonly',
    \   'modified': 'LightLineModified',
    \   'filename': 'LightLineFilename',
    \   'filetype': 'LightLineFiletype',
    \   'fileformat': 'LightLineFileformat',
    \ },
    \ 'separator': { 'left': "", 'right': "" },
    \ 'subseparator': { 'left': "", 'right': "" }
    \ }

  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineGina()
    let _ = gina#component#repo#branch()
    return strlen(_) ? ''._ : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
          \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction
'''

# いろいろサクサク移動
[[plugins]]
repo = 'tpope/vim-unimpaired'

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  " deoplete を使う
  let g:deoplete#enable_at_startup = 1
  " smartcase を使う
  let g:deoplete#enable_smart_case = 1
  " 補完が有効になる文字数
  let g:deoplete#auto_completion_start_length = 3

  let g:deoplete#sources = {}
  let g:deoplete#sources._=['buffer', 'file', 'dictionary']

  let g:deoplete#omni#input_patterns = {}

  let g:deoplete#omni#functions = {}

  " <TAB> : 補完
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
'''

# NeoVim のプラグインを Vim8 で使うのに必要なやつ
[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''
depends = ['deoplete.nvim']

# NeoVim のプラグインを Vim8 で使うのに必要なやつ
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''
depends = ['deoplete.nvim']

# }}}
#-------------------------------------------------------------------------------------------------
# □ コーディング関連 {{{
#-------------------------------------------------------------------------------------------------
# インデントを見やすく
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 2
  let g:indent_guides_auto_colors = 0
  augroup indent_guides_commands
    autocmd!

    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg = #404040 ctermbg = 236
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg = #303030 ctermbg = 235
  augroup END
  let g:indent_guides_color_change_percent = 30
  let g:indent_guides_guide_size = 1
  let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
'''

# 構文チェック
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_linters = {
    \ 'javascript': ['eslint'],
    \ 'typescript': ['tslint']
    \ }
'''

# Language Server 対応
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = 'deoplete.nvim'
on_ft = ['javascript', 'typescript']
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'powershell .\\install.ps1'
  else
    let cmd = 'bash install.sh'
  endif
  let g:dein#plugin.build = cmd
'''
hook_add = '''
  let g:LanguageClient_serverCommands = {
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ }

  let g:LanguageClient_autoStart = 0

  augroup languageClient_commands
    autocmd!

    autocmd FileType javascript,typescript nnoremap <buffer> <Space>sr :call LanguageClient_textDocument_formatting()<CR>
    autocmd FileType javascript,typescript nnoremap <buffer> <Space>sd :call LanguageClient_textDocument_definition()<CR>
  augroup END
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'

# C#
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
if = '''has('python')'''
depends = ['deoplete.nvim']
hook_add = '''
  let g:deoplete#sources.cs = ['omni', 'file', 'buffer']
  let g:deoplete#omni#input_patterns.cs = ['\w*']

  augroup omnisharp_commands
    autocmd!

    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
    autocmd FileType cs nnoremap <buffer> <Space>sr :<C-u>OmniSharpCodeFormat<CR>
    autocmd FileType cs nnoremap <buffer> <Space>sd :<C-u>OmniSharpGotoDefinition<CR>
  augroup END
'''

# Elm
[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = 'elm'
depends = ['deoplete.nvim']
hook_add = '''
  augroup elm_commands
    autocmd!

    autocmd FileType elm nnoremap <buffer> <Space>sr :<C-u>ElmFormat<CR>
  augroup END

  let g:deoplete#omni#functions.elm = ['elm#Complete']
  let g:deoplete#omni#input_patterns.elm = '[^ \t]+'
  let g:deoplete#sources.elm = ['omni'] + g:deoplete#sources._
'''

# JavaScript
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'
depends = ['deoplete.nvim']
hook_add = '''
  let g:deoplete#sources.javascript = ['omni', 'file', 'buffer']
  let g:deoplete#omni#input_patterns.javascript = ['\w*']
'''

# TypeScript
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# VimScript
[[plugins]]
repo = 'machakann/vim-Verdin'
on_ft = 'vim'
hook_add = '''
  let g:deoplete#sources.vim = ['Verdin'] + g:deoplete#sources._
'''
# }}}
#-------------------------------------------------------------------------------------------------
# vim:set foldmethod=marker:
